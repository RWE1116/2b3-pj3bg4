var tipuesearch = {"pages": [{'title': 'About', 'text': '\n 組長: \n 41023228 陳瑨維_github username:RWE1116 \n http://[2001:288:6004:17:2023:cdb:4:4]:23020\xa0 \n members: \n 41023219 陳冠佑_github username: gu811 \n http://[2001:288:6004:17:2023:cdb:4:1]:23020 \n 41023221 陳冠翰_github username: 41023221 \n http://[2001:288:6004:17:2023:cdb:4:2]:23020 \n 41023222 陳奕倫_github username: kolas911205 \n http://[2001:288:6004:17:2023:cdb:4:3]:23020 \n 41023234 黃仕鈞_github username:\xa0Maskie-Razzio \n http://[2001:288:6004:17:2023:cdb:4:5]:23020 \n 41023247 劉學宇_github username: 410232 47 \n   http://[2001:288:6004:17:2023:cdb:4:6]:23020   \n 41023251 鄭立揚_github username: sdegbsvrtg \n http://[2001:288:6004:17:2023:cdb:4:7]:23020 \xa0 \n 41023254 謝鴻元_github username: 41023254 \n http://[2001:288:6004:17:2023:cdb:4:8]:23020 \xa0 \n github repository: https://github.com/mdecd2023/2b3-pj3bg4 \n github page: https://mdecd2023.github.io/2b3-pj3bg4 \n latex 分組報告:\xa0 https://github.com/mdecd2023/2b3-pj3bg4/releases \n 成果: 2b3-pj3bg4.zip \n \n', 'tags': '', 'url': 'About.html'}, {'title': '更新網站步驟', 'text': '1.個人的fork倉儲點選sync fork \n 2.輸入git pull \n 3.進行編輯 \n 4.acp \n 5.從個人fork 倉儲Open pull request \n 6.回到整組倉儲merge pull request \n \n', 'tags': '', 'url': '更新網站步驟.html'}, {'title': 'Instruction', 'text': '#轉載自 40623130 陳鉅忠學長 的個人網站 \n', 'tags': '', 'url': 'Instruction.html'}, {'title': 'Cmd', 'text': 'dir (查看目錄) \n help (指令求救) \n python +名(利用python執行"+名"檔案) \n cls (清除指令紀錄) \n cd +名 (移動) \n 檔名開頭+TAB鍵 (列出全名-可連續按) \n attrib -r -s -h X:\\ . \xa0 /s /d (將X槽的檔案從隱藏還原) \n', 'tags': '', 'url': 'Cmd.html'}, {'title': 'Git', 'text': 'git add (存取資料) \n git commit -m "name" (命名此批欲上傳資料) \n git pull (更新至近端資料) \n git push (上傳至遠端) \n git version (查看git版本) \n git update (更新github版本) \n git revert -m "name"(還原commit -m name紀錄) \n git cleav -n -f(-n列出欲清除的資料 -f真的清除) \n git status (狀態查詢) \n git branch +名 (新建分支) \n git checkout +名 (切換分支) \n git merge +名 (合併分支) \n git log (查看檔案版本) \n git log --oneline --graph --all (檢查各版本間的關聯與樹狀圖) \n \n', 'tags': '', 'url': 'Git.html'}, {'title': 'Notes', 'text': 'ipv6 proxy_2001:288:6004:17::42 #3128 \n download waterfox \n teams cd2023 \n https://mde.tw/cd2023 \n https://mdecd2023.github.io/2a-pj1agx \n', 'tags': '', 'url': 'Notes.html'}, {'title': 'acp時可用詞彙', 'text': '\n 以下是一些常見用於更新網站時標註的英文詞彙： \n \n Title (標題) \n Heading (標題) \n Subheading (副標題) \n Label (標籤) \n Button (按鈕) \n Form (表單) \n Input (輸入) \n Select (選擇) \n Checkbox (勾選框) \n Radio button (單選按鈕) \n Menu (菜單) \n Navigation (導覽) \n Footer (頁尾) \n Link (連結) \n Image (圖片) \n Video (影片) \n Text (文字) \n Paragraph (段落) \n List (清單) \n Table (表格) \n Error message (錯誤訊息) \n Success message (成功訊息) \n Alert (警示) \n Confirmation (確認) \n Submit (提交) \n Cancel (取消) \n Back (返回) \n Next (下一步) \n Save (儲存) \n Edit (編輯) \n \n \n 以下是一些常見的動詞，可用於描述網站更新操作： \n \n Update (更新) \n Modify (修改) \n Add (新增) \n Delete (刪除) \n Edit (編輯) \n Publish (發佈) \n Upload (上傳) \n Download (下載) \n Move (移動) \n Resize (調整大小) \n Change (變更) \n Rearrange (重新排列) \n Customize (自訂) \n Refresh (重新整理) \n Preview (預覽) \n Save (儲存) \n Undo (復原) \n Redo (重做) \n Copy (複製) \n Paste (貼上) \n \n', 'tags': '', 'url': 'acp時可用詞彙.html'}, {'title': 'overview', 'text': '\n \xa0 field+board FPSS \n \xa0 field+board   field+castles \n', 'tags': '', 'url': 'overview.html'}, {'title': 'group', 'text': '\n \n 亂數 \n \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n \n \n \n \n', 'tags': '', 'url': 'group.html'}, {'title': '會議記錄', 'text': '', 'tags': '', 'url': '會議記錄.html'}, {'title': '5月24', 'text': '討論事項:分配工作、討論機器人規格 \n 工作分配: \n \n 繪圖:41023234、41023247 \n \n \n PDF:41023228、41023251  \n \n 程式:41023228、41023251、41023254  \n \n PPT:41023219、41023222  \n 輔助:41023221、41023228 \n 會議影片: https://www.youtube.com/live/_WezVHd--LY?feature=share \n 5月25 \n', 'tags': '', 'url': '5月24.html'}, {'title': '5月25', 'text': '討論事項:今日工作報告 \n 21、54、19:測試連線 \n 51:更新latex報告 \n 34:繪製球員 \n 47:繪製計分裝置 \n 28:督導、協助 \n 會議影片:  \n \n', 'tags': '', 'url': '5月25.html'}, {'title': '6月1', 'text': '回報各自進度 \n \n', 'tags': '', 'url': '6月1.html'}, {'title': '6月14', 'text': '討論項目: 待辦事項 \n 倒數計時十分鐘 \n 球員碰觸顯示 \n \n \n', 'tags': '', 'url': '6月14.html'}, {'title': '分組報告', 'text': 'latex 分組報告:\xa0 https://github.com/mdecd2023/2b3-pj3bg4/releases \n \n 線上簡報:\xa0 \n https://docs.google.com/presentation/d/1bQn41no_FS7ysFve1OeRPY_mbFJSk3LITaoMSsNAtYs/edit#slide=id.p \n \n \n \n 國 立 虎 尾 科 技 大 學 機 械 設 計 工 程 系 cd2023 2b-pj3bg4 分組報告 網際足球場景設計 Web-based Football Scene Design \n           國       立       虎       尾       科       技       大       學       機       械       設       計       工       程       系       cd2023 2b-pj3bg4       分   組   報   告       網   際   足   球   場   景   設   計       Web-based Football Scene Design         \n           •   指   導   教   授   ：       嚴       家       銘       老       師       •   班       級   ：       四       設       二       乙       •   學       生   ：       陳       冠       佑       (41023219)           陳       冠       翰       (41023221)           陳       奕       倫       (41023222)           陳       瑨       維       (41023228)           黃       仕       鈞       (41023234)               劉       學       宇       (41023247)           鄭       立       揚       (41023251)               謝       鴻       元       (41023254)         \n \n 目 錄  \n           目       錄               •   會   議   記   錄   •   足   球   場   景           足   球   場   地   球   門   和   球   計   分   板       球   員   整   體           5/24   5/25   6/1                   第   一   版   第   二   版   第   三   版               第   一   版   第   二   版   第   三   版   第   四   版               第   一   版   第   二   版         \n \n 會議記錄 \n           會   議   記   錄               5/24:   https://www.youtube.com/live/_WezVHd--   LY?feature=share   討   論   事   項   :   分   配   工   作   、   討   論   機   器   人   規   格   分   配   工   作       :       畫   圖   :41023234   、   41023247       PDF:41023228   、   41023251       程   式   :41023228   、   41023251   、   41023254       PPT:41023219   、   41023222       輔   助   ；   41023221   、   41023228         \n             5/25:   https://youtu.be/IA19dIkLgtA   討   論   事   項   :   今   日   工   作   報   告   21   、   54   、   19:   測   試   連   線   51:   更   新   latex   報   告   34:   繪   製   球   員   47:   繪   製   計   分   裝   置   28:   督   導   、   協   助         \n           6/1:           討   論   事   項   :   確   認   工   作   進   度               https://www.youtube.com/live/_K1bM48   CZgw?feature=share         \n \n 足球場景 \n                                       足   球   場   景           我   們   首   先   先   把   足   球   場   地   畫   出   來   ，   長   為   4m   ，   寬   為   2.5m   。             足   球   場   地   (   第   一   版   ):                   Onshape:           CoppeliaSim:           \n                           足   球   場   地   (   第   二   版   ):               由   於   前   一   版   的   場   地   在   模   擬   時   ，   會   造   成   CoppeliaSim   之   幀   數   過   高   ，   因   此   我   們   將   場   地   的   外   型   簡   化   以   降   低   幀   數   。         \n                               球   門   和   球   :           球   門   的   規   格   為       長   0.6m   ，   寬   0.31281m   ，   高   0.09848m   。   球   的   規   格   為       白   色   ，   直   徑   0.1m   ，   重   量   0.5kg   。             \n                                                   記   分   板   (   第   一   版   ):                   該   版   本   之   記   分   板   如   下   圖   ，   本   因   中   間   之   轉   盤   一   換   成   日   內   瓦   機   構   ，   但   因   在   初   步   設   計   時   ，   未   詳   細   考   慮   公   差   配   合   ，   因   此   放   棄   該   版   本   ，   改   由   下   面   之   次   代   及   三   代   記   分   板   取   代   。             日   內   瓦   機   構           \n                                                               記   分   板   (   第   二   版   ):                             為   一   個   機   械   轉   盤   傳   動   計   分   系   統   。           \n                                                                     記   分   板   (   第   三   版   ):             數   字   都   改   模   成   新   版   的   個   別   分   件   ，   通   過   平   面   配   合   各   自   組   裝   ，   使   其   可   更   加   明   顯   ，   且   外   殼   多   擴   兩   孔   、   齒   輪   微   調   和   增   加   輔   助   軸   ，   使   輪   盤   更   方   便   抓   到   支   點   且   連   動   更   順   滑   ，   雖   然   變   化   看   起   來   不   大   但   總   體   表   現   都   有   一   定   更   新   。                         \n                                                               球   員   (   第   一   版   ):                   1   號   機   器   人   :           2   號   機   器   人   :           3   號   機   器   人   :           4   號   機   器   人   :             球   員   尺   寸   為       長   0.16m   ，   寬   0.14m   ，   高   為   0.2m   。   該   機   器   人   之   設   計   較   為   簡   單   ，   且   不   複   雜   ，   較   適   合   3D   繪   圖   新   手   。   我   們   在   這   四   台   機   器   人   上   面   分   別   做   了   不   同   的   記   號   ，   以   做   為   區   別   。         \n                                                               球   員   (   第   二   版   ):                   1   號   機   器   人   :           2   號   機   器   人   :           3   號   機   器   人   :           4   號   機   器   人   :           該   系   列   設   計   較   為   複   雜   ，   且   不   適   合   新   手   製   作   。           \n                                                                       球   員   (   第   二   版   ):           5   號   機   器   人   :           6   號   機   器   人   :           7   號   機   器   人   :           8   號   機   器   人   :           \n                           球   員   (   第   三   版   ):               由   於   將   前   一   版   的   球   員   放   入   CoppeliaSim   裡   ，   會   使   CoppeliaSim   之   幀   數   過   高   ，   使   其   整   體   運   行   過   慢   ，   因   此   將   機   器   人   重   新   設   計   。         \n                           球   員   (   第   四   版   ):                   經   過   多   次   修   改   以   及   簡   化   ，   我   們   最   終   決   定   採   用   這   一   版   。   尺   寸   為       長   0.16m   ，   寬   0.12m   ，   高   0.05m   。         \n                                           整   體   :           足   球   場   地   +   球   門   +   球   +   記   分   板   +   球   員         \n \n', 'tags': '', 'url': '分組報告.html'}, {'title': 'pj3', 'text': '2b3-pj3bg4.zip \n', 'tags': '', 'url': 'pj3.html'}, {'title': '程式', 'text': '2b3-pj3bg4.zip \n 操控球員程式: \n \n # pip install pyzmq cbor keyboard\nfrom zmqRemoteApi_IPv6 import RemoteAPIClient\nimport keyboard\n\nclient = RemoteAPIClient(\'localhost\', 23000)\n\nprint(\'Program started\')\nsim = client.getObject(\'sim\')\n\n\n\nsim.startSimulation()\nprint(\'Simulation started\')\n\ndef setBubbleRobVelocity(leftWheelVelocity1, rightWheelVelocity1, leftWheelVelocity2, rightWheelVelocity2):\n    leftMotor1 = sim.getObject(\'/81\')\n    rightMotor1 = sim.getObject(\'/82\')\n    leftMotor2 = sim.getObject(\'/83\')\n    rightMotor2 = sim.getObject(\'/84\')\n    sim.setJointTargetVelocity(leftMotor1, leftWheelVelocity1)\n    sim.setJointTargetVelocity(rightMotor1, rightWheelVelocity1)\n    sim.setJointTargetVelocity(leftMotor2, leftWheelVelocity2)\n    sim.setJointTargetVelocity(rightMotor2, rightWheelVelocity2)\n   \n\n\'\'\'\n# Example usage 1:\nsetBubbleRobVelocity(1.0, 1.0)\ntime.sleep(2)\nsetBubbleRobVelocity(0.0, 0.0)\n\'\'\'\n# use keyborad to move BubbleRob\n\nwhile True:\n    if keyboard.is_pressed(\'up\'):\n        setBubbleRobVelocity(15.0, 15.0, 15.0, 15.0)\n    elif keyboard.is_pressed(\'down\'):\n        setBubbleRobVelocity(-15.0, -15.0, -15.0, -15.0)\n    elif keyboard.is_pressed(\'left\'):\n        setBubbleRobVelocity(-5.0, 5.0, -5.0, 5.0)\n    elif keyboard.is_pressed(\'right\'):\n        setBubbleRobVelocity(5.0, -5.0, 5.0, -5.0)\n    elif keyboard.is_pressed(\'q\'):\n        # stop simulation\n        sim.stopSimulation()\n    else:\n        setBubbleRobVelocity(0.0, 0.0, 0.0, 0.0)\n\n \n 操控計分版、計時器、得分球員顯示器之程式: \n \n from zmqRemoteApi_IPv6 import RemoteAPIClient\nimport time\nimport math\nimport keyboard\n\nclient = RemoteAPIClient(\'localhost\', 23000)\nsim = client.getObject(\'sim\')\nsensor = sim.getObject(\'/Floor/G/sensor2\')\nsensor1 = sim.getObject(\'/Floor/R/sensor1\')\nib = sim.getObject(\'/IB\')\nib2 = sim.getObject(\'/IB/IB\')\nib3 = sim.getObject(\'/IB/ib0\')\nib4 = sim.getObject(\'/IB/ib1\')\nib5 = sim.getObject(\'/IB/ib2\')\nib6 = sim.getObject(\'/IB/ib3\')\nib7 = sim.getObject(\'/IB/ib4\')\nib8 = sim.getObject(\'/IB/ib5\')\nib9 = sim.getObject(\'/IB/ib6\')\n\nred1 = sim.getObject(\'/r1/r1\')\nred2 = sim.getObject(\'/r2/r2\')\nred3 = sim.getObject(\'/r3/r3\')\nred4 = sim.getObject(\'/r4/r4\')\n\ngreen1 = sim.getObject(\'/g1/g1\')\ngreen2 = sim.getObject(\'/g2/g2\')\ngreen3 = sim.getObject(\'/g3/g3\')\ngreen4 = sim.getObject(\'/g4/g4\')\n\nlast_sensor_touch = None\nprint(last_sensor_touch)\n\nball = sim.getObject(\'/ball\')\njoint1 = sim.getObject(\'/joint1\')\njoint2 = sim.getObject(\'/joint2\')\njoint3 = sim.getObject(\'/joint3\')\njoint4 = sim.getObject(\'/joint4\')\ncounter1 = 0\ncounter = 0\n\nresult = sim.readProximitySensor(sensor)\nresult1 = sim.readProximitySensor(sensor1)\nprint("team green", counter1)\nprint("team red", counter)\nsim.setShapeColor(ib, None, sim.colorcomponent_ambient_diffuse, [0, 0, 1])\nsim.setShapeColor(ib2, None, sim.colorcomponent_ambient_diffuse, [0, 0, 1])\nsim.setShapeColor(ib3, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\nsim.setShapeColor(ib4, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\nsim.setShapeColor(ib5, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\nsim.setShapeColor(ib6, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\nsim.setShapeColor(ib7, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\nsim.setShapeColor(ib8, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\nsim.setShapeColor(ib9, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n\nlast_executed_multiple = 0\nt = 600\ns = [\n    [1, 1, 1, 0, 1, 1, 1],\n    [0, 0, 1, 0, 0, 1, 0],\n    [1, 0, 1, 1, 1, 0, 1],\n    [1, 0, 1, 1, 0, 1, 1],\n    [0, 1, 1, 1, 0, 1, 0],\n    [1, 1, 0, 1, 0, 1, 1],\n    [1, 1, 0, 1, 1, 1, 1],\n    [1, 0, 1, 0, 0, 1, 0],\n    [1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 0, 1, 1]\n]\n\n\ndef score(x, y):\n    for i in range(10):\n        if x == i:\n            for j in range(7):\n                part = sim.getObject(\'/scoreboard/\' + y + str(j))\n                if s[i][j] == 1:\n                    sim.setShapeColor(part, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n                else:\n                    sim.setShapeColor(part, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n\n\n\n\ndef sysCall_actuation():\n    global t\n    minutes = math.floor(t / 60)\n    seconds = t % 60\n    t1 = math.floor(minutes / 10)\n    t2 = minutes % 10\n    t3 = math.floor(seconds / 10)\n    t4 = seconds % 10\n    \n    score(t1, \'a\')\n    score(t2, \'b\')\n    score(t3, \'c\')\n    score(t4, \'d\')\n\n    \n    t -= 1\n    if t < 0:\n        sim.pauseSimulation()\n    p = sim.getSimulationState()\n    if p == 22:\n        score(0, \'a\')\n        score(0, \'b\')\n        score(0, \'c\')\n        score(0, \'d\')\n\n\nwhile t >= 0:\n    resultred1 = sim.readProximitySensor(red1)\n    resultred2 = sim.readProximitySensor(red2)\n    resultred3 = sim.readProximitySensor(red3)\n    resultred4 = sim.readProximitySensor(red4)\n    resultgreen1 = sim.readProximitySensor(green1)\n    resultgreen2 = sim.readProximitySensor(green2)\n    resultgreen3 = sim.readProximitySensor(green3)\n    resultgreen4 = sim.readProximitySensor(green4)\n    _, detection_statered1, _, _, _ = resultred1\n    _, detection_statered2, _, _, _ = resultred2\n    _, detection_statered3, _, _, _ = resultred3\n    _, detection_statered4, _, _, _ = resultred4\n    _, detection_stategreen1, _, _, _ = resultgreen1\n    _, detection_stategreen2, _, _, _ = resultgreen2\n    _, detection_stategreen3, _, _, _ = resultgreen3\n    _, detection_stategreen4, _, _, _ = resultgreen4\n    if detection_statered1:\n        last_sensor_touch = \'red1\'\n        sim.setShapeColor(ib, None, sim.colorcomponent_ambient_diffuse, [1, 0, 0])\n        sim.setShapeColor(ib2, None, sim.colorcomponent_ambient_diffuse, [1, 0, 0])\n        sim.setShapeColor(ib3, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib4, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib5, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib6, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib7, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib8, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib9, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n\n    elif detection_statered2:\n        last_sensor_touch = \'red2\'\n        sim.setShapeColor(ib, None, sim.colorcomponent_ambient_diffuse, [1, 0, 0])\n        sim.setShapeColor(ib2, None, sim.colorcomponent_ambient_diffuse, [1, 0, 0])\n        sim.setShapeColor(ib3, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib4, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib5, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib6, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib7, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib8, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib9, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n\n    elif detection_statered3:\n        last_sensor_touch = \'red3\'\n        sim.setShapeColor(ib, None, sim.colorcomponent_ambient_diffuse, [1, 0, 0])\n        sim.setShapeColor(ib2, None, sim.colorcomponent_ambient_diffuse, [1, 0, 0])\n        sim.setShapeColor(ib3, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib4, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib5, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib6, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib7, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib8, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib9, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n\n    elif detection_statered4:\n        last_sensor_touch = \'red4\'\n        sim.setShapeColor(ib, None, sim.colorcomponent_ambient_diffuse, [1, 0, 0])\n        sim.setShapeColor(ib2, None, sim.colorcomponent_ambient_diffuse, [1, 0, 0])\n        sim.setShapeColor(ib3, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib4, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib5, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib6, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib7, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib8, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib9, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n\n    elif detection_stategreen1:\n        last_sensor_touch = \'green1\'\n        sim.setShapeColor(ib, None, sim.colorcomponent_ambient_diffuse, [0, 1, 0])\n        sim.setShapeColor(ib2, None, sim.colorcomponent_ambient_diffuse, [0, 1, 0])\n        sim.setShapeColor(ib3, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib4, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib5, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib6, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib7, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib8, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib9, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n\n    elif detection_stategreen2:\n        last_sensor_touch = \'green2\'\n        sim.setShapeColor(ib, None, sim.colorcomponent_ambient_diffuse, [0, 1, 0])\n        sim.setShapeColor(ib2, None, sim.colorcomponent_ambient_diffuse, [0, 1, 0])\n        sim.setShapeColor(ib3, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib4, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib5, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib6, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib7, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib8, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib9, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n    \n    elif detection_stategreen3:\n        last_sensor_touch = \'green3\'\n        sim.setShapeColor(ib, None, sim.colorcomponent_ambient_diffuse, [0, 1, 0])\n        sim.setShapeColor(ib2, None, sim.colorcomponent_ambient_diffuse, [0, 1, 0])\n        sim.setShapeColor(ib3, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib4, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib5, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib6, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib7, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib8, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib9, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n\n    elif detection_stategreen4:\n        last_sensor_touch = \'green4\'\n        sim.setShapeColor(ib, None, sim.colorcomponent_ambient_diffuse, [0, 1, 0])\n        sim.setShapeColor(ib2, None, sim.colorcomponent_ambient_diffuse, [0, 1, 0])\n        sim.setShapeColor(ib3, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib4, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib5, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib6, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib7, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib8, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib9, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n\n    print(last_sensor_touch)\n\n    result = sim.readProximitySensor(sensor)\n    _, detection_state, _, _, _ = result\n    if detection_state:\n        print("GOAL！")\n        print("Player", last_sensor_touch, "GOAL!")\n        counter1 += 1\n        print("team red", counter1)\n        sim.setObjectPosition(ball, -1, [0, 0, 0.5])\n        target_angle = math.radians(36)\n        current_angle = sim.getJointPosition(joint1)\n        new_angle = current_angle + target_angle\n        sim.setJointTargetPosition(joint1, new_angle)\n        time.sleep(1)\n        sim.setShapeColor(ib, None, sim.colorcomponent_ambient_diffuse, [0, 0, 1])\n        sim.setShapeColor(ib2, None, sim.colorcomponent_ambient_diffuse, [0, 0, 1])\n        sim.setShapeColor(ib3, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib4, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib5, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib6, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib7, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib8, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib9, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        if counter1 > 1 and counter1 % 10 == 0 and counter1 != last_executed_multiple + 1:\n            target_angle = math.radians(36)\n            current_angle = sim.getJointPosition(joint2)\n            new_angle = current_angle + target_angle\n            sim.setJointTargetPosition(joint2, new_angle)\n            last_executed_multiple = counter1\n\n\n        continue\n\n    result1 = sim.readProximitySensor(sensor1)\n    _, detection_state1, _, _, _ = result1\n    if detection_state1:\n        print("GOAL！")\n        print("Player", last_sensor_touch, "GOAL!")\n        counter += 1\n        print("team green", counter)\n        sim.setObjectPosition(ball, -1, [0, 0, 0.5])\n        target_angle = math.radians(36)\n        current_angle = sim.getJointPosition(joint3)\n        new_angle = current_angle + target_angle\n        sim.setJointTargetPosition(joint3, new_angle)\n        time.sleep(1)\n        sim.setShapeColor(ib, None, sim.colorcomponent_ambient_diffuse, [0, 0, 1])\n        sim.setShapeColor(ib2, None, sim.colorcomponent_ambient_diffuse, [0, 0, 1])\n        sim.setShapeColor(ib3, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib4, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib5, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib6, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib7, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib8, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib9, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        if counter > 1 and counter % 10 == 0 and counter != last_executed_multiple + 1:\n            target_angle = math.radians(36)\n            current_angle = sim.getJointPosition(joint4)\n            new_angle = current_angle + target_angle\n            sim.setJointTargetPosition(joint4, new_angle)\n\n    time.sleep(0.01)\n    sysCall_actuation()\n\n\nwhile True:\n    time.sleep(1)\n    sysCall_actuation()\n    if keyboard.is_pressed(\'q\'):\n        break\n\nprint("Simulation Stop")\nprint("time stop")\n\n \n', 'tags': '', 'url': '程式.html'}, {'title': '記分板', 'text': '2b3-pj3bg4.zip \n 初代記分板:( 記分板 ) \n 該版本之記分板如下圖，本因中間之轉盤一換成日內瓦機構，但因在初步設計時，未詳細考慮公差配合，因此放棄該版本，改由下面之 次代及三代記分板取代。 \n \n 日內瓦機構 \n \n 1 \n 1 \n \n 次代記分板: \n 41023234記分板 \n 次代記分板設計圖: \n \n \n \n \n \n 1 \n 1 \n 三代的數字都改模成新版的個別分件，通過平面配合各自組裝，使其可更加明顯，且外殼多擴兩孔、齒輪微調和增加輔助軸，使輪盤更方便抓到支點且連動更順滑，雖然變化看起來不大但總體表現都有一定更新 \n 三代記分板設計圖: \n \n \n \n \n \n 1 \n 1 \n 更新記分板外殼，因舊版顯示方式不清楚 \n \n \n \n \n 6/15更新: 加入以程式控制的倒計時與記名功能。 \n \n \n 以下為程式 \n \n from zmqRemoteApi_IPv6 import RemoteAPIClient\nimport time\nimport math\nimport keyboard\n\nclient = RemoteAPIClient(\'localhost\', 23000)\nsim = client.getObject(\'sim\')\nsensor = sim.getObject(\'/Floor/G/sensor2\')\nsensor1 = sim.getObject(\'/Floor/R/sensor1\')\nib = sim.getObject(\'/IB\')\nib2 = sim.getObject(\'/IB/IB\')\nib3 = sim.getObject(\'/IB/ib0\')\nib4 = sim.getObject(\'/IB/ib1\')\nib5 = sim.getObject(\'/IB/ib2\')\nib6 = sim.getObject(\'/IB/ib3\')\nib7 = sim.getObject(\'/IB/ib4\')\nib8 = sim.getObject(\'/IB/ib5\')\nib9 = sim.getObject(\'/IB/ib6\')\n\nred1 = sim.getObject(\'/r1/r1\')\nred2 = sim.getObject(\'/r2/r2\')\nred3 = sim.getObject(\'/r3/r3\')\nred4 = sim.getObject(\'/r4/r4\')\n\ngreen1 = sim.getObject(\'/g1/g1\')\ngreen2 = sim.getObject(\'/g2/g2\')\ngreen3 = sim.getObject(\'/g3/g3\')\ngreen4 = sim.getObject(\'/g4/g4\')\n\nlast_sensor_touch = None\nprint(last_sensor_touch)\n\nball = sim.getObject(\'/ball\')\njoint1 = sim.getObject(\'/joint1\')\njoint2 = sim.getObject(\'/joint2\')\njoint3 = sim.getObject(\'/joint3\')\njoint4 = sim.getObject(\'/joint4\')\ncounter1 = 0\ncounter = 0\n\nresult = sim.readProximitySensor(sensor)\nresult1 = sim.readProximitySensor(sensor1)\nprint("team green", counter1)\nprint("team red", counter)\nsim.setShapeColor(ib, None, sim.colorcomponent_ambient_diffuse, [0, 0, 1])\nsim.setShapeColor(ib2, None, sim.colorcomponent_ambient_diffuse, [0, 0, 1])\nsim.setShapeColor(ib3, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\nsim.setShapeColor(ib4, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\nsim.setShapeColor(ib5, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\nsim.setShapeColor(ib6, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\nsim.setShapeColor(ib7, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\nsim.setShapeColor(ib8, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\nsim.setShapeColor(ib9, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n\nlast_executed_multiple = 0\nt = 600\ns = [\n    [1, 1, 1, 0, 1, 1, 1],\n    [0, 0, 1, 0, 0, 1, 0],\n    [1, 0, 1, 1, 1, 0, 1],\n    [1, 0, 1, 1, 0, 1, 1],\n    [0, 1, 1, 1, 0, 1, 0],\n    [1, 1, 0, 1, 0, 1, 1],\n    [1, 1, 0, 1, 1, 1, 1],\n    [1, 0, 1, 0, 0, 1, 0],\n    [1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 0, 1, 1]\n]\n\n\ndef score(x, y):\n    for i in range(10):\n        if x == i:\n            for j in range(7):\n                part = sim.getObject(\'/scoreboard/\' + y + str(j))\n                if s[i][j] == 1:\n                    sim.setShapeColor(part, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n                else:\n                    sim.setShapeColor(part, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n\n\n\n\ndef sysCall_actuation():\n    global t\n    minutes = math.floor(t / 60)\n    seconds = t % 60\n    t1 = math.floor(minutes / 10)\n    t2 = minutes % 10\n    t3 = math.floor(seconds / 10)\n    t4 = seconds % 10\n    \n    score(t1, \'a\')\n    score(t2, \'b\')\n    score(t3, \'c\')\n    score(t4, \'d\')\n\n    \n    t -= 1\n    if t < 0:\n        sim.pauseSimulation()\n    p = sim.getSimulationState()\n    if p == 22:\n        score(0, \'a\')\n        score(0, \'b\')\n        score(0, \'c\')\n        score(0, \'d\')\n\n\nwhile t >= 0:\n    resultred1 = sim.readProximitySensor(red1)\n    resultred2 = sim.readProximitySensor(red2)\n    resultred3 = sim.readProximitySensor(red3)\n    resultred4 = sim.readProximitySensor(red4)\n    resultgreen1 = sim.readProximitySensor(green1)\n    resultgreen2 = sim.readProximitySensor(green2)\n    resultgreen3 = sim.readProximitySensor(green3)\n    resultgreen4 = sim.readProximitySensor(green4)\n    _, detection_statered1, _, _, _ = resultred1\n    _, detection_statered2, _, _, _ = resultred2\n    _, detection_statered3, _, _, _ = resultred3\n    _, detection_statered4, _, _, _ = resultred4\n    _, detection_stategreen1, _, _, _ = resultgreen1\n    _, detection_stategreen2, _, _, _ = resultgreen2\n    _, detection_stategreen3, _, _, _ = resultgreen3\n    _, detection_stategreen4, _, _, _ = resultgreen4\n    if detection_statered1:\n        last_sensor_touch = \'red1\'\n        sim.setShapeColor(ib, None, sim.colorcomponent_ambient_diffuse, [1, 0, 0])\n        sim.setShapeColor(ib2, None, sim.colorcomponent_ambient_diffuse, [1, 0, 0])\n        sim.setShapeColor(ib3, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib4, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib5, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib6, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib7, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib8, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib9, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n\n    elif detection_statered2:\n        last_sensor_touch = \'red2\'\n        sim.setShapeColor(ib, None, sim.colorcomponent_ambient_diffuse, [1, 0, 0])\n        sim.setShapeColor(ib2, None, sim.colorcomponent_ambient_diffuse, [1, 0, 0])\n        sim.setShapeColor(ib3, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib4, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib5, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib6, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib7, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib8, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib9, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n\n    elif detection_statered3:\n        last_sensor_touch = \'red3\'\n        sim.setShapeColor(ib, None, sim.colorcomponent_ambient_diffuse, [1, 0, 0])\n        sim.setShapeColor(ib2, None, sim.colorcomponent_ambient_diffuse, [1, 0, 0])\n        sim.setShapeColor(ib3, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib4, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib5, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib6, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib7, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib8, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib9, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n\n    elif detection_statered4:\n        last_sensor_touch = \'red4\'\n        sim.setShapeColor(ib, None, sim.colorcomponent_ambient_diffuse, [1, 0, 0])\n        sim.setShapeColor(ib2, None, sim.colorcomponent_ambient_diffuse, [1, 0, 0])\n        sim.setShapeColor(ib3, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib4, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib5, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib6, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib7, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib8, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib9, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n\n    elif detection_stategreen1:\n        last_sensor_touch = \'green1\'\n        sim.setShapeColor(ib, None, sim.colorcomponent_ambient_diffuse, [0, 1, 0])\n        sim.setShapeColor(ib2, None, sim.colorcomponent_ambient_diffuse, [0, 1, 0])\n        sim.setShapeColor(ib3, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib4, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib5, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib6, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib7, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib8, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib9, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n\n    elif detection_stategreen2:\n        last_sensor_touch = \'green2\'\n        sim.setShapeColor(ib, None, sim.colorcomponent_ambient_diffuse, [0, 1, 0])\n        sim.setShapeColor(ib2, None, sim.colorcomponent_ambient_diffuse, [0, 1, 0])\n        sim.setShapeColor(ib3, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib4, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib5, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib6, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib7, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib8, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib9, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n    \n    elif detection_stategreen3:\n        last_sensor_touch = \'green3\'\n        sim.setShapeColor(ib, None, sim.colorcomponent_ambient_diffuse, [0, 1, 0])\n        sim.setShapeColor(ib2, None, sim.colorcomponent_ambient_diffuse, [0, 1, 0])\n        sim.setShapeColor(ib3, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib4, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib5, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib6, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib7, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib8, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib9, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n\n    elif detection_stategreen4:\n        last_sensor_touch = \'green4\'\n        sim.setShapeColor(ib, None, sim.colorcomponent_ambient_diffuse, [0, 1, 0])\n        sim.setShapeColor(ib2, None, sim.colorcomponent_ambient_diffuse, [0, 1, 0])\n        sim.setShapeColor(ib3, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib4, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib5, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib6, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib7, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib8, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib9, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n\n    print(last_sensor_touch)\n\n    result = sim.readProximitySensor(sensor)\n    _, detection_state, _, _, _ = result\n    if detection_state:\n        print("GOAL！")\n        print("Player", last_sensor_touch, "GOAL!")\n        counter1 += 1\n        print("team red", counter1)\n        sim.setObjectPosition(ball, -1, [0, 0, 0.5])\n        target_angle = math.radians(36)\n        current_angle = sim.getJointPosition(joint1)\n        new_angle = current_angle + target_angle\n        sim.setJointTargetPosition(joint1, new_angle)\n        time.sleep(1)\n        sim.setShapeColor(ib, None, sim.colorcomponent_ambient_diffuse, [0, 0, 1])\n        sim.setShapeColor(ib2, None, sim.colorcomponent_ambient_diffuse, [0, 0, 1])\n        sim.setShapeColor(ib3, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib4, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib5, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib6, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib7, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib8, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib9, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        if counter1 > 1 and counter1 % 10 == 0 and counter1 != last_executed_multiple + 1:\n            target_angle = math.radians(36)\n            current_angle = sim.getJointPosition(joint2)\n            new_angle = current_angle + target_angle\n            sim.setJointTargetPosition(joint2, new_angle)\n            last_executed_multiple = counter1\n\n\n        continue\n\n    result1 = sim.readProximitySensor(sensor1)\n    _, detection_state1, _, _, _ = result1\n    if detection_state1:\n        print("GOAL！")\n        print("Player", last_sensor_touch, "GOAL!")\n        counter += 1\n        print("team green", counter)\n        sim.setObjectPosition(ball, -1, [0, 0, 0.5])\n        target_angle = math.radians(36)\n        current_angle = sim.getJointPosition(joint3)\n        new_angle = current_angle + target_angle\n        sim.setJointTargetPosition(joint3, new_angle)\n        time.sleep(1)\n        sim.setShapeColor(ib, None, sim.colorcomponent_ambient_diffuse, [0, 0, 1])\n        sim.setShapeColor(ib2, None, sim.colorcomponent_ambient_diffuse, [0, 0, 1])\n        sim.setShapeColor(ib3, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib4, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib5, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib6, None, sim.colorcomponent_ambient_diffuse, [0, 0, 0])\n        sim.setShapeColor(ib7, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib8, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        sim.setShapeColor(ib9, None, sim.colorcomponent_ambient_diffuse, [1, 1, 1])\n        if counter > 1 and counter % 10 == 0 and counter != last_executed_multiple + 1:\n            target_angle = math.radians(36)\n            current_angle = sim.getJointPosition(joint4)\n            new_angle = current_angle + target_angle\n            sim.setJointTargetPosition(joint4, new_angle)\n\n    time.sleep(0.01)\n    sysCall_actuation()\n\n\nwhile True:\n    time.sleep(1)\n    sysCall_actuation()\n    if keyboard.is_pressed(\'q\'):\n        break\n\nprint("Simulation Stop")\nprint("time stop")\n\n \n', 'tags': '', 'url': '記分板.html'}, {'title': '球場', 'text': '2b3-pj3bg4.zip \n onshape: 41023234-field \n CoppeliaSim: 41023234-CS-field \n \n \n \n 由於原本的場景會拖累運行速度，故重新製作場景。 \n \n', 'tags': '', 'url': '球場.html'}, {'title': '球員', 'text': '2b3-pj3bg4.zip \n 666系列: \n 41023228測試用 666 \n \n . \n . \n robot-00系列: \n 由41023247製作 \n 機器人1 : robot-00系列(stl、ttt) \n \n 1 \n 1 \n 1 \n  editor1 結束  \n Maskie Razzio系列: \n 由41023234製作 \n 機器人2: bulldozer6 \n \n 機器人3: bulldozer4 \n \n 機器人4: tank \n \n 機器人5: castle \n \n 機器人6: Eye of Sauron \n \n 機器人7: cat \n \n 機器人8: battlebot \n \n 機器人?: wheelchair \n \n . \n . \n Coppeliasim: cars \n 四代與五代球員: robot2 \n 由於將前幾代球員放入CoppeliaSim裡，會使CoppeliaSim之幀數過高，使其整體運行過慢，因此將機器人重新設計。 \n 四代球員:robot-cccccc系列 \n \n 五代球員:robot-110 系列 \n \n \n', 'tags': '', 'url': '球員.html'}, {'title': '工作分配', 'text': '繪圖:41023234、41023247 \n https://mdecd2023.github.io/2b3-pj3bg4/content/%E7%90%83%E5%93%A1.html \xa0 \n PDF:41023228、41023251 \n \xa0 https://github.com/mdecd2023/2b3-pj3bg4/releases \n 程式:41023228、41023251、41023254\xa0 \n https://mdecd2023.github.io/2b3-pj3bg4/content/%E7%A8%8B%E5%BC%8F.html \xa0 \n PPT:41023219、41023222 \n https://mdecd2023.github.io/2b3-pj3bg4/content/%E5%88%86%E7%B5%84%E5%A0%B1%E5%91%8A.html \xa0 \n 輔助:41023221、41023228 \n \n 41023219:實作整理簡報 \n https://mdecd2023.github.io/2b3-pj3bg4/content/%E5%88%86%E7%B5%84%E5%A0%B1%E5%91%8A.html \xa0 \n 41023221:輔助編寫python主程式 \n https://mdecd2023.github.io/2b3-pj3bg4/content/%E7%A8%8B%E5%BC%8F.html \xa0 \n 41023222:提供簡報指導 \n 41023228:查找參考資訊、繪製場景、球員 \n https://mdecd2023.github.io/2b3-pj3bg4/content/group.html \n https://mdecd2023.github.io/2b3-pj3bg4/content/%E7%90%83%E5%A0%B4.html \xa0 \n https://mdecd2023.github.io/2b3-pj3bg4/content/%E7%90%83%E5%93%A1.html \xa0 \n 41023234:細化初版模型 \n https://mdecd2023.github.io/2b3-pj3bg4/content/%E8%A8%98%E5%88%86%E6%9D%BF.html \n https://mdecd2023.github.io/2b3-pj3bg4/content/%E7%90%83%E5%93%A1.html \n https://mdecd2023.github.io/2b3-pj3bg4/content/%E7%90%83%E5%A0%B4.html \n 41023247:繪畫初版模型 \n https://mdecd2023.github.io/2b3-pj3bg4/content/%E8%A8%98%E5%88%86%E6%9D%BF.html \n https://mdecd2023.github.io/2b3-pj3bg4/content/%E7%90%83%E5%93%A1.html \n 41023251:製作latex報告、統整網頁 \n https://github.com/mdecd2023/2b3-pj3bg4/releases \n 41023254:編寫python主程式 \n https://mdecd2023.github.io/2b3-pj3bg4/content/%E7%A8%8B%E5%BC%8F.html \xa0 \n', 'tags': '', 'url': '工作分配.html'}, {'title': 'final', 'text': 'Final \n \n', 'tags': '', 'url': 'final.html'}]};